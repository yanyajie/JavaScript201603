1、Ajax
  ->async javascript and xml (异步的JS和XML)
  ->客户端可以通过Ajax向服务器端发送数据请求,从而获取到动态的数据
  ->XML:可扩展的标记语言,在项目中我们可以使用XML来存储数据,存储的数据具有一定的格式和规则
  ->以后在项目中我们向服务器发送请求(Ajax),一般都使用异步的请求方式

2、JSONP
  ->和Ajax一样都是客户端用来向服务器请求数据的一种方式
  ->Ajax是同源请求策略,JSONP是非同源请求策略

3、同源/非同源(跨域)
  ->URL:协议(http|https|ftp...)://(域名|IP):(端口号 HTTP->80 HTTPS->443 FTP->21)
  ->C:客户端的URL地址(浏览器地址栏中的地址) 例如:http://192.168.0.100/index.html
  ->S:服务器端提供的接口请求地址(API) 例如:http://192.168.0.100/getUser

  ->C地址中的协议、域名、端口与S地址中的一模一样才可以称之为同源;反之三者中有一个不一样就是跨域(非同源)
  ->同源请求数据我们使用Ajax,跨域请求数据我们使用JSONP

4、HTTP事务
  ->HTTP:超文本传输协议(客户端和服务器端内容或数据的传输,不仅仅可以传输文本还可以传输文件或者图片) HTTPS:更加安全(SSL)的HTTP FTP:资源文件的传输(我们想把文件上传到具体的服务器磁盘中,一般都是通过FTP上传的)
  ->一般情况下,只要是客户端向服务器端发送请求,服务器端把内容响应个客户端,这个中间都是同过HTTP这个协议进行传输的(市面上超过90%的网站都是这样处理的)
  ->HTTP事务=Request+Response 必须请求和响应阶段都成功才算一个事务完成,只要有一个阶段失败,当前本次HTTP请求就是失败的

  ->客户端发送请求,此时和服务器端建立了一个链接的通道,当服务器把内容成功的响应给客户端的时候,链接的通道自己关闭销毁


5、HTTP报文
  ->起始行
  ->首部:通用首部(请求和响应都有的)、请求首部、响应首部、实体首部、扩展首部(不是天生自带的是我们自己自定义的首部)
  ->主体:请求主体(客户端向服务器端发送的内容在请求主体中)、响应主体(服务器端给客户端返回的内容在响应主体中)

  Request Headers:
  POST /addUser HTTP/1.1  ->起始行

  //->下面都是首部
  Host: 192.168.0.100
  Connection: keep-alive
  Content-Length: 113
  Origin: http://192.168.0.100
  User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2679.0 Safari/537.36
  Content-Type: text/plain;charset=UTF-8
  Accept: */*
  Referer: http://192.168.0.100/register.html
  Accept-Encoding: gzip, deflate
  Accept-Language: zh-CN,zh;q=0.8,en;q=0.6

  Response Headers:
  HTTP/1.1 200 OK ->起始行

  content-type: application/json;charset=utf-8
  Date: Wed, 25 May 2016 04:33:40 GMT
  Connection: keep-alive
  Transfer-Encoding: chunked

6、HTTP METHOD(HTTP请求方式)
  ->"GET":一般应用于到服务器端获取数据用的(但是同样也可以给服务器端传递数据)
  ->"POST":一般应用于给服务器传递数据用的(但是服务器同样也可以给客户端返回数据)
  ->"DELETE":从服务器上删除部分命名资源
  ->"PUT":把客户端传递过来的数据存储到服务器端的命名资源中
  ...

  GET/POST的区别:
  ->GET请求是把需要传递给服务器端的内容统一都放在请求的URL地址后面了,然后通过URL问号传参的方式给服务器;POST请求是把需要传递给服务器的内容放在请求的主体中传递给服务器的;
    xhr.open("get","/addUser?name=珠峰&age=7&sex=1");
    xhr.send(null);

    xhr.open("post","/addUser");
    xhr.send('{"name":"珠峰","age":7,"sex":1}');//->这就是在往HTTP的请求主体中写入内容,把内容通过主体传递给服务器端,传递的内容是字符串格式的(JSON格式的字符串)
  ->由于上述不同的传递内容的原理,导致了GET请求存在长度的限制(URL在不同浏览器中的长度都有一个最大值->谷歌8kb 火狐7kb IE2kb,超过最大长度部分的内容,浏览器会自己把URL地址进行截取);但是POST没有大小限制(尽量别传递太大的资源);

  ->通过GET请求,浏览器会自动给其创建一个缓存,例如:第一次请求完成,浏览器会把获取内容的痕迹缓存一部分,当第二次重新请求的时候,很有可能获取的内容还是第一次请求回来的内容,导致最新的数据无法及时获取,所有使用GET请求的时候,我们都需要自己清除一下缓存;POST没有任何的缓存;
    xhr.open("get","/add?_="+Math.random());

  ->安全问题,GET请求相对于POST请求不安全,因为我们传递给服务器的内容都是写在URL后面的,很容易被其他程序进行URL劫持,从而把数据泄露;POST由于内容放在请求主体中,是很难劫持到的,所以相对安全;




扩展：URL/URI/URN
->URI:统一资源标识符(服务器上的资源文件都有一个自己的名字,我们可以通过名字找到对应的资源)
->URL/URN都是URI的一个子集,URL:统一资源定位符 URN:统一资源名称
->http://www.zhufengpeixun.cn/index.html

扩展:域名
->一级域名 www.qq.com
->二级域名 sports.qq.com
->三级域名 kbs.sports.qq.com
->三个不同的域名,一般情况下解析出来的服务器的IP地址也是不一样的

扩展:我们现在做的项目基本上大部分都是“前后台分离”的
  ->前端我们使用HTML(5)/CSS(3)/JS进行编程:首先拿到设计师提供的PSD格式的效果图,使用PS把需要的素材图片切下来,并且记录或者了解每一个区域的样式(字体大小、字体的颜色、盒子的宽高等等) ->使用HTML/CSS搭建结构和样式 ->使用JS或者一些JS插件编写一些操作或者动画效果 ->找后台开发工程师索要数据请求的URL接口地址,在JS中通过ajax/jsonp读取到数据,并且把数据绑定在页面中 ->如果项目出现问题,学会使用控制台分析错误的原因,找到对应的错误,告知相关人员修改

  ->后台我们可以使用NODE、C#、.NET、JAVA、PHP、PYTHON、RUBY...这些进行开发:业务逻辑的处理、数据库的管理、提供客户端请求的接口/地址、发布项目、服务器维护

  ->当需求下来的时候,首先前端和后台坐在一起,把接口地址以及接口的数据格式定下来,后端先提供一个假的接口地址,此时不管是前端还是后端都按照这个规范同时进行项目开发,当完成后最后上线发布前进行真实联调


